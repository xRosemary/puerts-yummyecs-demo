"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dispatcher = void 0;
const Common_1 = require("../../Common/");
const SystemPoolStore_1 = require("../Pool/SystemPoolStore");
const Define_1 = require("./Define");
class Dispatcher extends Common_1.Singleton {
    dispatch(ae) {
        const listenerList = Common_1.ActionMapping.getInstance().getListenerList(ae.constructor);
        if (listenerList === undefined || listenerList.length <= 0) {
            console.warn(`Can not find listener by ${ae.constructor.name}`);
            return;
        }
        if (ae instanceof Define_1.IAction) {
            // Action 为一对一通信，因此只取第一个监听者
            return this.dispatchAction(ae, listenerList[0]);
        }
        else {
            // Event 为一对多通信
            return this.dispatchEvent(ae, listenerList);
        }
    }
    dispatchEvent(event, listenerList) {
        listenerList.forEach((v) => {
            const system = SystemPoolStore_1.SystemPoolStore.getInstance().systems.find((s) => s.constructor === v.ctor);
            if (system !== undefined) {
                return this.execMethod(system, v.functionName, event);
            }
        });
    }
    /**
     * 发布Action
     * @param action
     */
    dispatchAction(action, listener) {
        const system = SystemPoolStore_1.SystemPoolStore.getInstance().systems.find((s) => s.constructor === listener.ctor);
        if (system !== undefined) {
            return this.execMethod(system, listener.functionName, action);
        }
    }
    execMethod(system, functionName, ae) {
        console.log(`Dispatch [${ae.constructor.name}] to ${system.constructor.name}: ${functionName}()`);
        return system[functionName].call(system, ae);
    }
}
exports.Dispatcher = Dispatcher;
//# sourceMappingURL=Dispatcher.js.map