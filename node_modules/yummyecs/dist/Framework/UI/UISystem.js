"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UISystem = void 0;
const UE = require("ue");
const Decorator_1 = require("../../Decorator/Decorator");
const ECS_1 = require("../ECS");
const PublicAE_1 = require("./PublicAE");
const UIStore_1 = require("./UIStore");
const SystemPoolStore_1 = require("../Pool/SystemPoolStore");
const Asset_1 = require("../Asset");
const Define_1 = require("./Define");
const UIDecorator_1 = require("../../Decorator/UIDecorator");
const Common_1 = require("../../Common");
class UISystem extends ECS_1.System {
    onOpenUMG(action) {
        (0, Common_1.assert)(Common_1.GAME_INSTANCE !== undefined, 'GAME_INSTANCE is undefined');
        let store = UIStore_1.UIStore.getInstance();
        const name = action.name;
        let info = store.widgetInfo.get(name);
        if (info === undefined) {
            console.warn(`${name}'s system has not been registered`);
            return;
        }
        const widgetClass = UE.Class.Load(info.path);
        let widget = Common_1.GAME_INSTANCE.GetWorld().CreateWidget(widgetClass);
        info.callback.forEach((compInfo, component) => {
            this.bindCallback(compInfo, component, widget, info.systemCtor);
        });
        widget.AddToViewport(action.zOrder);
    }
    onCloseUMG(action) {
        action.widget.RemoveFromParent();
        // TODO 卸载callback
    }
    onBindUMG(action) {
        // 通过构造器找到ui目录
        let store = UIStore_1.UIStore.getInstance();
        let widgetInfo = store.widgetInfo.get(action.name);
        let actionTable;
        if (widgetInfo !== undefined) {
            // 之前注册过
            actionTable = widgetInfo.callback.get(action.widget);
        }
        else {
            // 未注册过
            const uiTable = Asset_1.LoadSheetAction.do(Define_1.UITable);
            const path = uiTable.find((v) => v.name === action.name)?.path;
            if (path === undefined) {
                console.error(`${name} was not found in the configuration table`);
                return;
            }
            widgetInfo = {
                path: path,
                systemCtor: action.targetCtor,
                callback: new Map(),
            };
        }
        if (actionTable === undefined) {
            actionTable = new Map();
        }
        actionTable.set(action.action, action.propertyKey);
        widgetInfo.callback.set(action.widget, actionTable);
        store.widgetInfo.set(action.name, widgetInfo);
    }
    bindCallback(compInfo, component, widget, systemCtor) {
        const system = SystemPoolStore_1.SystemPoolStore.getInstance().systems.find((s) => s.constructor === systemCtor);
        if (system === undefined) {
            console.warn(`${systemCtor.name} has not been created`);
            return;
        }
        compInfo.forEach((callback, action) => {
            widget[component][action].Add(() => {
                system[callback](widget);
            });
        });
    }
}
__decorate([
    (0, Decorator_1.listen)(PublicAE_1.OpenUMG)
], UISystem.prototype, "onOpenUMG", null);
__decorate([
    (0, Decorator_1.listen)(PublicAE_1.CloseUMG)
], UISystem.prototype, "onCloseUMG", null);
__decorate([
    (0, Decorator_1.listen)(UIDecorator_1.BindUMG)
], UISystem.prototype, "onBindUMG", null);
exports.UISystem = UISystem;
//# sourceMappingURL=UISystem.js.map