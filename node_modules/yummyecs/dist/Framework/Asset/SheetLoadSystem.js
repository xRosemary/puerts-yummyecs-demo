"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SheetLoadSystem = void 0;
const fs = require("fs");
const puerts_1 = require("puerts");
const Decorator_1 = require("../../Decorator");
const ECS_1 = require("../ECS");
const PublicAE_1 = require("./PublicAE");
const SheetStore_1 = require("./SheetStore");
//#region 常量
function toNumberArr(str) {
    return str.split(',').map((v) => Number(v));
}
function toStringArr(str) {
    return str.split(',');
}
function toBooleanArr(str) {
    return str.split(',').map((v) => Boolean(v));
}
const MIN_ROW = 1;
const MIN_COLUMN = 2;
const gameInstance = puerts_1.argv.getByName('GameInstance');
//#endregion
class SheetLoadSystem extends ECS_1.System {
    onLoadSheetAction(action) {
        let store = SheetStore_1.SheetStore.getInstance();
        let name = action.ctor.name;
        let sheetInfo = store.sheets.get(name);
        if (sheetInfo === undefined) {
            this.error(`Unregistered resource file type: ${name}`);
            return [];
        }
        if (sheetInfo.data !== undefined) {
            return sheetInfo.data;
        }
        sheetInfo.data = this.parseFile(sheetInfo, action.ctor);
        return sheetInfo.data;
    }
    onReLoadSheetAction(action) {
        let store = SheetStore_1.SheetStore.getInstance();
        let name = action.ctor.name;
        let sheetInfo = store.sheets.get(name);
        if (sheetInfo === undefined) {
            this.error(`Unregistered resource file type: ${name}`);
            return;
        }
        sheetInfo.data = this.parseFile(sheetInfo, action.ctor);
    }
    /**
     * 将文本内容转为预定义类的实例列表
     */
    parseFile(sheetInfo, ctor) {
        let content = this.readContent(gameInstance.GetContentDir() + sheetInfo.path);
        if (content.length <= MIN_ROW || content[0].length <= MIN_COLUMN)
            return [];
        content.forEach((v) => v.shift()); // 去掉表示注释的第一列
        this.analyzeDataTypes(sheetInfo, content[0]);
        content.shift(); // 去掉表示数据类型的第一行
        return content
            .map((list) => list.map((v, i) => sheetInfo.types[i](v))) // 转成所需的数据序列
            .map((v) => new ctor.prototype.constructor(...v)); // 构造成目标对象
    }
    /**
     * 读取文件内容并按行分割，返回一个文本数组
     * @param filePath 路径
     */
    readContent(filePath) {
        return fs
            .readFileSync(filePath, 'utf-8')
            .split(/[\r\n]+/) // 按行分割
            .filter((v) => v[0] !== '#') // 跳过注释
            .map((v) => v.split('\t')); // 按列分割
    }
    /**
     * 解析数据类型
     */
    analyzeDataTypes(sheetInfo, types) {
        sheetInfo.types = types.map((v) => {
            if (v === 'string') {
                return String;
            }
            else if (v === 'string[]') {
                return toStringArr;
            }
            else if (v === 'number') {
                return Number;
            }
            else if (v === 'number[]') {
                return toNumberArr;
            }
            else if (v === 'boolean') {
                return Boolean;
            }
            else if (v === 'boolean[]') {
                return toBooleanArr;
            }
            else {
                return String;
            }
        });
    }
}
__decorate([
    (0, Decorator_1.listen)(PublicAE_1.LoadSheetAction)
], SheetLoadSystem.prototype, "onLoadSheetAction", null);
__decorate([
    (0, Decorator_1.listen)(PublicAE_1.ReLoadSheetAction)
], SheetLoadSystem.prototype, "onReLoadSheetAction", null);
exports.SheetLoadSystem = SheetLoadSystem;
//# sourceMappingURL=SheetLoadSystem.js.map