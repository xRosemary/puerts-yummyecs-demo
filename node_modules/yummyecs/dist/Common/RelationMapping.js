"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMapping = exports.ActionMapping = void 0;
const Singleton_1 = require("./Singleton");
/**
 * 事件映射
 */
class ActionMapping extends Singleton_1.Singleton {
    constructor() {
        super(...arguments);
        /**
         * action注册表
         * @key 事件的构造器
         * @value 观察者列表 - [观察者的构造器, 响应函数的名称][]
         */
        this.actionMap = new Map();
    }
    /**
     * 注册监听Action的发生
     * @param ctor 观察者的构造器
     * @param functionName 响应函数的名称
     * @param ae action的构造器
     */
    registerListener(ctor, functionName, ae) {
        let listenerList = this.actionMap.get(ae);
        if (listenerList === undefined) {
            listenerList = [{ ctor: ctor, functionName: functionName }];
            this.actionMap.set(ae, listenerList);
            return;
        }
        listenerList.push({ ctor: ctor, functionName: functionName });
    }
    unregisterListener(ctor, ae) {
        let listenerList = this.actionMap.get(ae);
        if (listenerList === undefined) {
            return;
        }
        const index = listenerList.findIndex((v) => v.ctor === ctor);
        ~index && listenerList.splice(index, 1);
    }
    getListenerList(ctor) {
        return this.actionMap.get(ctor) ?? [];
    }
}
exports.ActionMapping = ActionMapping;
/**
 * 用于记录System与Component的控制关系
 */
class RelationMapping extends Singleton_1.Singleton {
    constructor() {
        super(...arguments);
        this.componentMap = new Map();
    }
    registerComponent(systemCtor, componentCtor) {
        let compList = this.componentMap.get(systemCtor);
        if (compList === undefined) {
            this.componentMap.set(systemCtor, [componentCtor]);
        }
        else {
            compList.push(componentCtor);
        }
    }
    /**
     * 检测某个system是否可以控制某类component
     */
    auth(systemCtor, componentCtor) {
        let compList = this.componentMap.get(systemCtor);
        if (compList === undefined) {
            return false;
        }
        return compList.includes(componentCtor);
    }
}
exports.RelationMapping = RelationMapping;
//# sourceMappingURL=RelationMapping.js.map